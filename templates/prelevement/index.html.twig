{% extends 'base.html.twig' %}

{% block title 'Groupe' %}



{% block body %}



<article>

    <div class="container">

        {% include '/arrow/arrowPrelevement.html.twig' %}

    </div>

    <div class ="container pt-5">



        <div class="row md-8">

            <div class="dropper" style="width: 80%; height: 370px;"></div>



            <div class="draggableContainer col md-4  border-left border-primary" style="height: 370px;">

                <div class="dropper">



                    <div class="draggable " draggable="true"><button class="btn btn-primary btn-md  btn-block m-1">Sang</button></div>

                    <div class="draggable " draggable="true"><button class="btn btn-primary btn-md  btn-block m-1">CSF</button></div>

                    <div class="draggable " draggable="true"><button class="btn btn-primary btn-md  btn-block m-1">Cerveau</button></div>

                    <div class="draggable " draggable="true"><button class="btn btn-primary btn-md  btn-block m-1">Foie</button></div>

                    <div class="draggable " draggable="true"><button class="btn btn-primary btn-md  btn-block m-1">Coeur</button></div>

                    <div class="draggable " draggable="true"><button class="btn btn-primary btn-md  btn-block m-1">Formulations</button></div>

                    <div class="draggable " draggable="true"><button class="btn btn-primary btn-md  btn-block m-1">Urine</button></div>

                    <div class="draggable " draggable="true"><button class="btn btn-primary btn-md  btn-block m-1">Fécès</button></div>

                    <div class="draggable " draggable="true"><button class="btn btn-primary btn-md  btn-block m-1">Autres</button></div>



                </div>

            </div>

        </div>

    </div>

    <div class="container d-flex mt-5" >

        <div class="row d-md-">

            <div class="col md-8">

                <button class="btn btn-light mr-1">Tout</button>

                <button class="btn btn-light mr-1">Aucun</button>

                <a href="{{ path('temps.index', {id: etude.id, slug: etude.slug}) }}" class="btn btn-primary mr-1">Suivant</a>

                {#<a href="{{ path('admin.produit.new') }}" class="btn btn-secondary">Creer</a>#}

                {#<a href="{{  path('admin.produit.edit', {id: produit.id}) }}" class="btn btn-primary">Nouveau groupe</a>#}

            </div>

        </div>

    </div>

</article>

    <script>{#drap & drop#}

        document.querySelector('.dropper').addEventListener('dragover', function(e) {

            e.preventDefault(); // Annule l'interdiction de drop

        });

        (function() {



            let i;

            const dndHandler = {



                draggedElement: null, // Propriété pointant vers l'élément en cours de déplacement



                applyDragEvents: function (element) {



                    element.draggable = true;



                    const dndHandler = this; // Cette variable est nécessaire pour que l'événement « dragstart » ci-dessous accède facilement au namespace « dndHandler »



                    element.addEventListener('dragstart', function (e) {

                        dndHandler.draggedElement = e.target; // On sauvegarde l'élément en cours de déplacement

                        e.dataTransfer.setData('text/plain', ''); // Nécessaire pour Firefox

                    });



                },



                applyDropEvents: function (dropper) {



                    dropper.addEventListener('dragover', function (e) {

                        e.preventDefault(); // On autorise le drop d'éléments

                        this.className = 'dropper drop_hover'; // Et on applique le style adéquat à notre zone de drop quand un élément la survole

                    });



                    dropper.addEventListener('dragleave', function () {

                        this.className = 'dropper'; // On revient au style de base lorsque l'élément quitte la zone de drop

                    });



                    const dndHandler = this; // Cette variable est nécessaire pour que l'événement « drop » ci-dessous accède facilement au namespace « dndHandler »



                    dropper.addEventListener('drop', function (e) {



                        let target = e.target,

                            draggedElement = dndHandler.draggedElement, // Récupération de l'élément concerné

                            clonedElement = draggedElement.cloneNode(true); // On créé immédiatement le clone de cet élément



                        while (target.className.indexOf('dropper') === -1) { // Cette boucle permet de remonter jusqu'à la zone de drop parente

                            target = target.parentNode;

                        }



                        target.className = 'dropper'; // Application du style par défaut



                        clonedElement = target.appendChild(clonedElement); // Ajout de l'élément cloné à la zone de drop actuelle

                        dndHandler.applyDragEvents(clonedElement); // Nouvelle application des événements qui ont été perdus lors du cloneNode()



                        draggedElement.parentNode.removeChild(draggedElement); // Suppression de l'élément d'origine



                    });



                }



            };



            const elements = document.querySelectorAll('.draggable'),

                elementsLen = elements.length;



            for (i = 0; i < elementsLen; i++) {

                dndHandler.applyDragEvents(elements[i]); // Application des paramètres nécessaires aux éléments déplaçables

            }



            const droppers = document.querySelectorAll('.dropper'),

                droppersLen = droppers.length;



            for (i = 0; i < droppersLen; i++) {

                dndHandler.applyDropEvents(droppers[i]); // Application des événements nécessaires aux zones de drop

            }



        })();







    </script>

{% endblock %}